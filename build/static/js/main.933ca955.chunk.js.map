{"version":3,"sources":["components/Message/Message.js","components/Form/Form.js","components/Menu.js","components/App/App.js","components/config.js","components/About/About.js","serviceWorker.js","index.js"],"names":["Message","react_default","a","createElement","className","this","props","message","userName","imageUrl","src","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","list","imgURL","messageRef","firebase","database","ref","child","listenMessages","fileInput","React","createRef","imgCanvas","nextProps","user","setState","displayName","event","target","value","newItem","push","_this2","current","files","file","img","Image","URL","createObjectURL","console","log","onload","canvas","getContext","drawImage","width","height","toBlob","blob","storage","name","put","then","snapshot","getDownloadURL","downloadURL","key","handleSend","_this3","limitToLast","on","values","val","map","item","index","components_Message_Message","type","onChange","handleImage","bind","placeholder","handleChange","onKeyPress","handleKeyPress","onClick","Menu","Link","to","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","auth","currentUser","onAuthStateChanged","provider","GoogleAuthProvider","signInWithPopup","signOut","LogOut","SignIn","components_Menu","components_Form_Form","About","Boolean","window","location","hostname","match","Main","Switch","Route","exact","path","component","ReactDOM","render","BrowserRouter","src_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.933ca955.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Message.css';\n\n\nclass Message extends Component {\n    render() {\n        return ( \n            <div className = \"message\" >\n                <span className = \"message__author\" > {this.props.message.userName}: </span> {this.props.message.message} \n                {this.props.message.imageUrl ? <img src={this.props.message.imageUrl} /> : ''}\n            </div>\n        )\n    }\n}\n\nexport default Message;","import React, {Component} from 'react';\nimport './Form.css';\nimport Message from '../Message/Message';\nimport firebase from 'firebase';\n\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: 'User',\n            message: '',\n            list: [],\n            imgURL:''\n        };\n        this.messageRef = firebase.database().ref().child('messages');\n        this.listenMessages();\n\n        this.fileInput = React.createRef();\n        this.imgCanvas = React.createRef();\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.user) {\n            this.setState({'userName': nextProps.user.displayName});\n        }\n    }\n    handleChange(event) {\n        this.setState({message: event.target.value});\n    }\n    handleSend() {\n        if (this.state.message) {\n            var newItem = {\n                userName: this.state.userName,\n                message: this.state.message,\n            }\n            this.messageRef.push(newItem);\n            this.setState({message: ''});\n        }\n    }\n    handleImage() {\n\n        // console.log(this.fileInput.current.files[0]);\n        // console.log(\"post image\");\n        if (this.fileInput.current.files[0]) {\n            const file = this.fileInput.current.files[0];\n            let img = new Image;\n            img.src = URL.createObjectURL(file);\n\n            console.log(file);\n            console.log(img);\n            console.log(img.src);\n            \n\n            img.onload = () => {\n                let canvas = this.imgCanvas\n                let ctx = this.imgCanvas.current.getContext('2d');\n                ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, 100, 100)\n                canvas.current.toBlob(blob => {\n\n                    // inject into storage then send msg\n                    firebase.storage().ref('images/').child(file.name)\n                        .put(blob)\n                        .then(snapshot => {\n                            snapshot.ref.getDownloadURL()\n                                .then(downloadURL => {\n                                    this.state.imageUrl = downloadURL;\n                                });\n                        })\n                }, 'image/webp', 0.8)\n\n            };\n        }\n    }\n\n    handleKeyPress(event) {\n        if (event.key !== 'Enter') return;\n        this.handleSend();\n    }\n    listenMessages() {\n        this.messageRef\n            .limitToLast(10)\n            .on('value', message => {\n                this.setState({\n                    list: Object.values(message.val()),\n                });\n            });\n    }\n    render() {\n        return ( \n            \n\n\n            <div className = \"form\" >\n                <div className = \"form__message\" > \n                        {this.state.list.map((item, index) => <Message key = {index} message = {item}/>)} \n                </div> \n                 \n                <canvas ref={this.imgCanvas}></canvas>\n                <input type=\"file\" ref={this.fileInput} onChange={this.handleImage.bind(this)}></input>\n                    \n                <div className = \"form__row\" >\n                    \n                    <input \n                        className = \"form__input\"\n                        type = \"text\"\n                        placeholder = \"Type message\"\n                        value = {this.state.message}\n                        onChange = {this.handleChange.bind(this)}\n                        onKeyPress = {this.handleKeyPress.bind(this)}\n                        /> \n                    <button \n                        className = \"form__button\"\n                        onClick = {this.handleSend.bind(this)}\n                    >\n                    Envoyer \n                </button>\n\n            \n                </div>\n                \n\n            </div>\n        );\n    }\n}\n\nexport default Form;","import React from 'react';\nimport {Link} from 'react-router-dom';\n// import App from './App/App.js'\n\nconst Menu = () => {\n    return ( \n        <div>\n            <button className = \"app__button\" > <Link to = {\"/\"} > Index du chat </Link></button >\n            <button className = \"app__button\" > <Link to = {\"/about\"} > About </Link></button >\n        </div>\n    )\n};\n\n\nexport default Menu","import React, { Component } from 'react';\nimport './App.css';\nimport Form from '../Form/Form';\nimport Menu from '../Menu';\nimport firebase from 'firebase';\nimport firebaseConfig from '../config';\nfirebase.initializeApp(firebaseConfig);\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n    }\n  }\n  componentDidMount() {\n    if (firebase.auth().currentUser) {\n      this.setState({ user: firebase.auth().currentUser });\n    }\n\n    firebase.auth().onAuthStateChanged(user => {\n      console.log(user)\n      this.setState({ user });\n    });\n  }\n  SignIn() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider);\n  }\n  LogOut() {\n    firebase.auth().signOut();\n  }\n\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div>\n          <h2>\n            B3 Dev - React.js\n          </h2>\n          {!this.state.user ? \n            (<button className=\"app__button\" onClick={this.SignIn.bind(this)}>S'enregistrer</button>)\n            : \n            (<button className=\"app__button\" onClick={this.LogOut.bind(this)}>Déconnexion</button>)\n          }\n          {this.state.user?\n            (  <Menu / > )\n            :\n            ''\n          }\n\n        </div>\n        {this.state.user ?\n          <div className=\"app__list\">\n            <Form user={this.state.user}/>\n          </div> : \"Veuillez vous connecter pour entrer dans la discussion\"\n        }\n      </div>\n    )\n  }\n}\nexport default App;","export default {\n    apiKey: \"AIzaSyCFmRv9NAgObz2KLxy3QjqAACXbGFSzLIk\",\n    authDomain: \"chatboxb3dev.firebaseapp.com\",\n    databaseURL: \"https://chatboxb3dev.firebaseio.com\",\n    projectId: \"chatboxb3dev\",\n    storageBucket: \"chatboxb3dev.appspot.com\",\n    messagingSenderId: \"1094586384035\"\n};","import React, {Component} from 'react';\nimport Menu from '../Menu';\n\nclass About extends Component {\n    render() {\n        return ( \n        <div>\n            <div className = \"app\" >\n                <div >\n                    <h2> Page About </h2>\n                    <Menu />\n                </div> \n            </div>\n\n            <div>\n                <p> Vous êtes sur la page About</p> \n            </div> \n        </div>\n        )\n    }\n}\n\nexport default About;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport About from './components/About/About';\nimport {BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\n\nconst Main = () => {\n    return (\n        <Switch>\n            <Route exact path={\"/\"} component={App} />\n            <Route exact path={\"/about\"} component={About} />\n        </Switch>\n    )\n};\n\nconst Home = () => {\n    return (\n        <div>\n            <Main />\n        </div>\n    )\n};\n\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Home />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}